include "../../common_configs/akka.conf"
include "../../common_configs/akka-router.conf"
include "../../common_configs/metrics.conf"
include "../../common_configs/matsim.conf"

beam{

	# DEFAULT_ADJUSTMENT | PERCENTAGE_ADJUSTMENT
	# populationAdjustment="DEFAULT_ADJUSTMENT"
	
	exchange.scenario{
		source = "beam"
		fileFormat = "csv"
	}
	
	warmStart{
		enabled = false
		path = "https://s3.us-east-2.amazonaws.com/beam-outputs/run140-base__2018-06-26_22-20-49_28e81b6d.zip"
	}
	
	
	
	agentsim{
		
		simulationName = "wfrc_base"
		firstIteration = 0
		lastIteration = 20
		thresholdForWalkingInMeters = 100
		#thresholdForMakingParkingChoiceInMeters = 100
		schedulerParallelismWindow = 30
		timeBinSize = 3600
		endTime = "30:00:00"
		
		taz{
			filePath = ${beam.inputDirectory}"/../utah-taz-centers.csv"
			parkingFilePath = ${beam.inputDirectory}"/../utah-taz-parking.csv"
		}
		
		# Scaling and Tuning Params
		agentSampleSizeAsFractionOfPopulation = 1.0
		tuning{
			transitCapacity = 1.0
			transitPrice = 1.0
			tollPrice = 1.0
			rideHailPrice = 1.0
		}
		
		toll{
			#filePath=${beam.inputDirectory}"/../toll-prices.csv"
		}
		
		agents{
			# Paths to population files
			plans.inputPlansFilePath = ${beam.inputDirectory}"/../../../data/wfrc/plans.csv"
			plans.inputPersonAttributesFilePath = ${beam.inputDirectory}"/../../../data/wfrc/persons.csv"
			vehicles.vehiclesFilePath = ${beam.inputDirectory}"/../../../data/wfrc/vehicles.csv"
			households.inputFilePath = ${beam.inputDirectory}"/../../../data/wfrc/households.csv"
			households.inputHouseholdAttributesFilePath = ${beam.inputDirectory}"/../../../data/wfrc/household_attributes.csv"
			
			modalBehaviors{
				# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable ModeChoiceUniformRandom ModeChoiceLCCM ModeChoiceTourPurpose
				modeChoiceClass = "ModeChoiceTourPurpose"
				varType = "All"
				defaultValueOfTime = 8.0
				modeVotMultiplier.rideHailPooled = 2.0
				lccm.filePath = ${beam.inputDirectory}"/../asim-long-R-blank.csv"
				tourMode.filePath = ${beam.inputDirectory}"/../trip-tour-modes.csv"
				tpcmLoc.filePath = ${beam.inputDirectory}"/../utah-tpcm-loc.csv"
				
				mulitnomialLogit.params{
					transfer = -1.4
					car_intercept = 0.0
					walk_transit_intercept = 0.0
					drive_transit_intercept = 0.0
					ride_hail_transit_intercept = 0.0
					ride_hail_intercept = 0.0
					ride_hail_pooled_intercept = -1.5
					walk_intercept = 0.0
					bike_intercept = 0.0
				}
			}
			
			parking.mulitnomialLogit.params{
				distance_multiplier = 1.0
				installed_capacity_multiplier = 0.001
				parking_costs_price_multiplier = 4.5
			}
			
			#secondary mode choice
			tripBehaviors.mulitnomialLogit{
				#generate_secondary_activities = false
				#intercept_file_path = ${beam.inputDirectory}"/../activity-intercepts.csv"
				#activity_file_path = ${beam.inputDirectory}"/../activity-params.csv"
				#additional_trip_utility = 0.0
				#max_destination_distance_meters = 16000
				#max_destination_choice_set_size = 6
				#destination_nest_scale_factor = 1.0
				#mode_nest_scale_factor = 1.0
				#trip_nest_scale_factor = 1.0
			}
			
			#modeIncentive.filePath = ${beam.inputDirectory}"/../incentives.csv"
			#ptFare.filePath = ${beam.inputDirectory}"/../ptFares.csv"
			
			vehicles{
				#linkToGradePercentFilePath = ${beam.inputDirectory}"/../linkToGradePercent.csv"
				fuelTypesFilePath = ${beam.inputDirectory}"/../beamFuelTypes.csv"
				vehicleTypesFilePath = ${beam.inputDirectory}"/../vehicleTypes.csv"
				sharedFleets = []
			}
			
			
			rideHailTransit{
				# Ride Hail Transit Modes: Options are ALL, MASS, or the individual modes comma separate, e.g. BUS,TRAM
				#modesToConsider="MASS"
			}
			
			rideHail{
			
				defaultMicroFare=2.5
				
				initialization{
					# PROCEDURAL | FILE
					initType = "FILE"
					filePath=${beam.inputDirectory}"/../rh_fleets/rhFleet_Existing.csv"
					
					procedural{
						#INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER
						#initialLocation.name = "HOME"
						#initialLocation.home.radiusInMeters = 500
						#fractionOfInitialVehicleFleet = 0.5
						#vehicleTypeId="slc_testCar"
					}
					
				}
				
				defaultBaseCost=1.8
				defaultCostPerMile=0.91
				defaultCostPerMinute=0.28
				pooledBaseCost=1.89
				pooledCostPerMile=1.11
				pooledCostPerMinute=0.07
				refuelThresholdInMeters=20000.0
				rideHailManager.radiusInMeters=10000
				iterationStats.timeBinSizeInSec=3600
				
				surgePricing{
					# KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING
					priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
					surgeLevelAdaptionStep=0.1
					minimumSurgeLevel=0.1
				}
				
				allocationManager{
					# DEFAULT_MANAGER | POOLING_ALONSO_MORA | EV_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE
					name="POOLING_ALONSO_MORA"
					requestBufferTimeoutInSeconds = 200   # see beam.conf
					maxWaitingTimeInSec = 900
					maxExcessRideTime = 0.5 # up to +50%
					
					# ASYNC_GREEDY_VEHICLE_CENTRIC_MATCHING, ALONSO_MORA_MATCHING_WITH_ASYNC_GREEDY_ASSIGNMENT, ALONSO_MORA_MATCHING_WITH_MIP_ASSIGNMENT
					matchingAlgorithm="ALONSO_MORA_MATCHING_WITH_ASYNC_GREEDY_ASSIGNMENT"
					alonsoMora.maxRequestsPerVehicle = 5
					
					repositionLowWaitingTimes{
						# TOP_SCORES | KMEANS
						repositioningMethod="TOP_SCORES"
						percentageOfVehiclesToReposition=1.0
						repositionCircleRadiusInMeters = 3000
						timeWindowSizeInSecForDecidingAboutRepositioning=1200
						allowIncreasingRadiusIfDemandInRadiusLow=true
						minDemandPercentageInRadius=0.1
						minimumNumberOfIdlingVehiclesThresholdForRepositioning = 1
						keepMaxTopNScores=5
						minScoreThresholdForRepositioning=0.00001
						distanceWeight=0.01
						waitingTimeWeight=4.0
						demandWeight=4.0
						produceDebugImages=true
					}
				}
				
				repositioningManager{
					# DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES | INVERSE_SQUARE_DISTANCE_REPOSITIONING_FACTOR
					name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
					timeout=300
					
					demandFollowingRepositioningManager{
						sensitivityOfRepositioningToDemand=1
						numberOfClustersForDemand=30
					}
				}
			}
		}
	}
	
	
	physsim{
		
		skipPhysSim = false
		name = "BPRSim"
		flowCapacityFactor = 1.0
		storageCapacityFactor = 1.0
		
		inputNetworkFilePath = ${beam.routing.r5.directory}"/physsim-network.xml"
		writeEventsInterval = 0
		writePlansInterval = 0
		writeMATSimNetwork = false
		linkStatsWriteInterval = 1
		linkStatsBinSize = 3600
		ptSampleSize = 0.03
		quick_fix_minCarSpeedInMetersPerSecond = 0.0
		
		jdeqsim{
			agentSimPhysSimInterfaceDebugger.enabled = false
			cacc{
				enabled = false
				minRoadCapacity = 2000
				minSpeedMetersPerSec = 20
				speedAdjustmentFactor = 1.0
			}
		}
		
		linkStatsWriteInterval = 0
		writeEventsInterval = ${beam.outputs.defaultWriteInterval}
		writePlansInterval = ${beam.outputs.defaultWriteInterval}
		
		# Events for physsim
		events{
			eventsToWrite = "ActivityEndEvent,ActivityStartEvent,LinkEnterEvent,LinkLeaveEvent,PersonArrivalEvent,PersonDepartureEvent,VehicleEntersTrafficEvent,VehicleLeavesTrafficEvent"
			fileOutputFormats = "csv.gz"
		}
		eventsForFullVersionOfVia = true
		eventsSampling = 1.0
	}
	
	router.skim = {
		#keepKLatestSkims = 1
		#writeSkimsInterval = 1
		#writeAggregatedSkimsInterval = 1
		taz-skimmer {
			#name = "taz-skimmer"
			#fileBaseName = "skimsTAZ"
		}
	}
	
	
	replanning{
		maxAgentPlanMemorySize = 6
		Module_1 = "SelectExpBeta"
		ModuleProbability_1 = 0.7
		Module_2 = "ClearRoutes"
		ModuleProbability_2 = 0.1
		Module_3 = "ClearModes"
		ModuleProbability_3 = 0.1
		Module_4 = "TimeMutator"
		ModuleProbability_4 = 0.0
	}
	
	
	outputs{
		# The outputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
		# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
		# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "slc_test_2017-12-18_16-48-57"
		addTimestampToOutputDirectory = true
		baseOutputDirectory = ${beam.inputDirectory}"/../../../output/wfrc_base"
		
		# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
		defaultWriteInterval = 1
		writePlansInterval = ${beam.outputs.defaultWriteInterval}
		writeEventsInterval = ${beam.outputs.defaultWriteInterval}
		writeAnalysis = false
		writeLinkTraversalInterval = 0
		
		# The remaining params customize how events are written to output files
		events{
			# Events Writing Logging Levels:
			# Any event types not explicitly listed in overrideWritingLevels take on defaultWritingLevel
			eventsToWrite = "ActivityEndEvent,ActivityStartEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,ModeChoiceEvent,PathTraversalEvent,ReserveRideHailEvent,ReplanningEvent,RefuelSessionEvent,ChargingPlugInEvent,ChargingPlugOutEvent,ParkingEvent,LeavingParkingEvent,PersonArrivalEvent,PersonDepartureEvent,TeleportationEvent,TripArrivalEvent"
			fileOutputFormats = "csv.gz" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz
		}
		
		stats.binSize = 3600
	}
	
	
	debug{
		debugEnabled = false
		vmInformation.createGCClassHistogram = false
		writeModeChoiceAlternatives = false
		
		actor.logDepth = 0
		
		stuckAgentDetection{
			checkIntervalMs = 200
			checkMaxNumberOfMessagesEnabled = true
			defaultTimeoutMs = 60000
			enabled = false
			overallSimulationTimeoutMs = 100000
			thresholds = [
				{
					actorTypeToMaxNumberOfMessages{
						population = 1
						rideHailAgent = 1
						transitDriverAgent = 1
					}
					markAsStuckAfterMs = 20000
					triggerType = "beam.agentsim.agents.InitializeTrigger"
				},
				{
					actorTypeToMaxNumberOfMessages{
						population = 11
					}
					markAsStuckAfterMs = 20000
					triggerType = "beam.agentsim.agents.PersonAgent$ActivityEndTrigger"
				},
				{
					actorTypeToMaxNumberOfMessages{
						population = 1
					}
					markAsStuckAfterMs = 20000
					triggerType = "beam.agentsim.agents.PersonAgent$ActivityStartTrigger"
				},
				{
					actorTypeToMaxNumberOfMessages{
						population = 20
					}
					markAsStuckAfterMs = 20000
					triggerType = "beam.agentsim.agents.PersonAgent$PersonDepartureTrigger"
				},
				{
					actorTypeToMaxNumberOfMessages{
						population = 20
					}
					markAsStuckAfterMs = 20000
					triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$AlightVehicleTrigger"
				},
				{
					actorTypeToMaxNumberOfMessages{
						population = 20
					}
					markAsStuckAfterMs = 20000
					triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$BoardVehicleTrigger"
				},
				{
					actorTypeToMaxNumberOfMessages{
						population = 80,
						rideHailAgent = 104,
						transitDriverAgent = 114
					}
					markAsStuckAfterMs = 20000
					triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$EndLegTrigger"
				},
				{
					actorTypeToMaxNumberOfMessages{
						population = 80,
						rideHailAgent = 104,
						transitDriverAgent = 114
					}
					markAsStuckAfterMs = 20000
					triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$StartLegTrigger"
				},
				{
					actorTypeToMaxNumberOfMessages{
						transitDriverAgent = 1
					}
					markAsStuckAfterMs = 20000
					triggerType = "beam.agentsim.scheduler.BeamAgentScheduler$KillTrigger"
					
				}
			]
		}
	}
	
	
	spatial = {
		localCRS = "epsg:26912"  # what crs to use for distance calculations, must be in units of meters
		boundingBoxBuffer = 10000 # meters of buffer around network for defining extend of spatial indices
	}
	
	
	routing{
		#Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
		baseDate = "2022-03-30T00:00:00-06:00" # UTC -6 = America / Denver. March 30, 2022 (Wednesday). GTFS services valid March / April 2022
		transitOnStreetNetwork = true # PathTraversalEvents for transit vehicles
		r5{
			directory = ${beam.inputDirectory}"/../r5/chris"
			# Departure window in min
			departureWindow = 1.0167
			osmFile = ${beam.routing.r5.directory}"/test_network1.osm.pbf"
			osmMapdbFile = ${beam.routing.r5.directory}"/osm.mapdb"
			mNetBuilder{
				fromCRS = "epsg:4326" #WGS84
				toCRS = ${beam.spatial.localCRS}
			}
		}
		#startingIterationForTravelTimesMSA = 1
	}
	
	
	calibration{
		objectiveFunction = "CountsObjectiveFunction"
		mode.benchmarkFilePath=${beam.inputDirectory}"/../benchmark.csv"
		counts{
			countsScaleFactor = 10.355
			writeCountsInterval = 1
			averageCountsOverIterations = 1
			#inputCountsFile = ${beam.inputDirectory}"/../counts/fall_2015_wed_filtered.xml"
		}
	}
}
